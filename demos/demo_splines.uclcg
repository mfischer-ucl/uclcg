function setup()
{
	UI = {};
	UI.tabs = [];
	UI.titleLong = 'Splines';
	UI.titleShort = 'splines';
	UI.numFrames = 10000;
	UI.maxFPS = 100;
	UI.tabs.push(
		{
		visible: true,
		type: `x-shader/x-fragment`,
		title: `Fragment Program`,
		id: `OpenGLDemoFS`,
		initialValue: `precision highp float;

varying vec3 fragColor;
varying vec2 fragCoord;

void main() {
  float strip = 20.0;
  bool xb = fract(fragCoord.x * strip) > 0.5;
  bool yb = fract(fragCoord.y * strip) > 0.5;

  gl_FragColor.rgb = fragColor * (xb == yb ? 0.7 : 1.0);
  
  gl_FragColor.a = 1.0;  
}`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: true,
		type: `x-shader/x-vertex`,
		title: `Vertex Program`,
		id: `OpenGLDemoVS`,
		initialValue: `attribute vec2 coord;

varying vec3 fragColor;
varying vec2 fragCoord;

uniform float time;

mat4 computeProjectionMatrix(float fov, float aspect, float zNear, float zFar) { 
	float deltaZ = zFar - zNear;
	float cotangent = cos(fov * 0.5) / sin(fov * 0.5);
	
  	mat4 projectionMatrix;
  	projectionMatrix[0] = vec4(cotangent / aspect, 0.0, 0.0, 0.0);
	projectionMatrix[1] = vec4(0.0, cotangent, 0.0, 0.0);
	projectionMatrix[2] = vec4(0.0, 0.0, -(zFar + zNear) / deltaZ, -1.0);
	projectionMatrix[3] = vec4(0.0, 0.0, -2.0 * zNear * zFar / deltaZ, 0.0);
  
	return projectionMatrix;
}

// Used to generate a simple "look-at" camera. 
mat4 computeViewMatrix(vec3 VRP, vec3 TP, vec3 VUV) {		
  	// The VPN is pointing away from the TP. Can also be modeled the other way around.
  	vec3 VPN = VRP - TP;
  	// Generate the camera axes.
    vec3 n = normalize(VPN);
    vec3 u = normalize(cross(VUV, n));
    vec3 v = normalize(cross(n, u));
    
	mat4 modelViewMatrix;
	modelViewMatrix[0] = vec4(u[0], v[0], n[0], 0);
	modelViewMatrix[1] = vec4(u[1], v[1], n[1], 0);
	modelViewMatrix[2] = vec4(u[2], v[2], n[2], 0);
	modelViewMatrix[3] = vec4(- dot(VRP, u), - dot(VRP, v), - dot(VRP, n), 1);
  
  	return modelViewMatrix;
}

vec3 linearBezier1D(vec3 y0, vec3 y1, float coord) {  
  return mix(y0, y1, coord);
}

vec3 qudraticBezier1D(vec3 y0, vec3 y1, vec3 y2, float coord) {  
  return linearBezier1D(linearBezier1D(y0, y1, coord), linearBezier1D(y1, y2, coord), coord);
}

struct Patch2 {
  vec3 controlPoints[2 * 2];
};

struct Patch3 {
  vec3 controlPoints[3 * 3 ];
};

vec3 linearBezier2D(const vec2 coord, const Patch2 patch2) {   
  return 
    linearBezier1D(
    	linearBezier1D(patch2.controlPoints[0], patch2.controlPoints[1], coord.s),
  		linearBezier1D(patch2.controlPoints[2], patch2.controlPoints[3], coord.s),
      	coord.t);
}

vec3 qudraticBezier2D(const vec2 coord, const Patch3 patch3) {  
  return 
    qudraticBezier1D(
    	qudraticBezier1D(
      		patch3.controlPoints[0 * 3 + 0], 
      		patch3.controlPoints[0 * 3 + 1], 
      		patch3.controlPoints[0 * 3 + 2], coord.s),
  		qudraticBezier1D(
      		patch3.controlPoints[1 * 3 + 0], 
      		patch3.controlPoints[1 * 3 + 1], 
      		patch3.controlPoints[1 * 3 + 2], coord.s),
      	qudraticBezier1D(
      		patch3.controlPoints[2 * 3 + 0], 
      		patch3.controlPoints[2 * 3 + 1], 
      		patch3.controlPoints[2 * 3 + 2], coord.s),
      	coord.t);
}

vec3 spline(const vec2 coord) {  

  Patch2 patch2;
  patch2.controlPoints[0] = vec3(0.0, -1.0, 0.0);
  patch2.controlPoints[1] = vec3(1.0, 0.0, 0.0);
  patch2.controlPoints[2] = vec3(0.0, 1.0, 1.0);  
  patch2.controlPoints[3] = vec3(1.0, 0.0, 1.0);

  patch2.controlPoints[2 * 1 + 1].y = 2.0 * sin(1.0 * time);  
  patch2.controlPoints[2 * 0 + 0].y = 3.0 * cos(2.0 * time);
  
  //return linearBezier2D(coord, patch2);
  
  Patch3 patch3;
  patch3.controlPoints[3 * 0 + 0] = vec3(0.0, 0.0, 0.0);
  patch3.controlPoints[3 * 0 + 1] = vec3(0.5, 0.0, 0.0);
  patch3.controlPoints[3 * 0 + 2] = vec3(1.0, 0.0, 0.0);
  patch3.controlPoints[3 * 1 + 0] = vec3(0.0, 0.0, 0.5);
  patch3.controlPoints[3 * 1 + 1] = vec3(0.5, 4.0, 0.5);
  patch3.controlPoints[3 * 1 + 2] = vec3(1.0, 0.0, 0.5);
  patch3.controlPoints[3 * 2 + 0] = vec3(0.0, 0.0, 1.0);
  patch3.controlPoints[3 * 2 + 1] = vec3(0.5, 0.0, 1.0);
  patch3.controlPoints[3 * 2 + 2] = vec3(1.0, 0.0, 1.0);
  
  patch3.controlPoints[3 * 1 + 1].y = 2.0 * sin(1.0 * time);  
  patch3.controlPoints[3 * 0 + 0].y = 3.0 * cos(2.0 * time);
    
  return qudraticBezier2D(coord, patch3);
}

void main(void) {
  vec3 TP = vec3(0, 0, 0);
  vec3 VRP = 5.0 * vec3(sin(time), 0, cos(time)) + vec3(0, 3.0, 0);
  vec3 VUV = vec3(0, 1, 0); 
  mat4 viewMatrix = computeViewMatrix(VRP, TP, VUV); 
  
  mat4 projectionMatrix = computeProjectionMatrix(0.6, 2.0, 0.5, 200.0);  
  
  gl_Position = projectionMatrix * viewMatrix * vec4(vec3(3, 1, 3) * (spline(coord) - 0.5), 1.0);
  fragColor = coord.x * vec3(1, 0.5, 0.1) + coord.y * vec3(0.1, 0.5, 0.9);
  fragCoord = coord;
}`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: true,
		type: `text/javascript`,
		title: `OpenGL`,
		id: `DemoJS`,
		initialValue: `var resolution = 40;

function domain(i) {
  return (i / resolution);
}

function index(i, j, vertex, dimension ) {
  return (i * resolution + j) * 2 * 3 * 2 + 2 * vertex + dimension;
}

function getVertices() {
  var result = new Float32Array(2 * 3 * 2 * resolution * resolution);
  for(i = 0; i < resolution; i++) {
  	for(j = 0; j < resolution; j++) {
      	// First tri
      	result[index(i, j, 0, 0)] = domain(j + 0);
      	result[index(i, j, 0, 1)] = domain(i + 0);
      	result[index(i, j, 1, 0)] = domain(j + 1);
      	result[index(i, j, 1, 1)] = domain(i + 0);
        result[index(i, j, 2, 0)] = domain(j + 0);
      	result[index(i, j, 2, 1)] = domain(i + 1);
      	result[index(i, j, 3, 0)] = domain(j + 1);
      	result[index(i, j, 3, 1)] = domain(i + 0);      	
      	result[index(i, j, 4, 0)] = domain(j + 0);
      	result[index(i, j, 4, 1)] = domain(i + 1);
        result[index(i, j, 5, 0)] = domain(j + 1);
      	result[index(i, j, 5, 1)] = domain(i + 1);
	}
  }
  
  return result;
}

function loadShaders() {
  shaderProgram = gl.createProgram();

  gl.attachShader(shaderProgram, getShader(gl, "OpenGLDemoVS"));
  gl.attachShader(shaderProgram, getShader(gl, "OpenGLDemoFS"));
  gl.linkProgram(shaderProgram);

  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
    alert("Could not initialise shaders");
  }

  gl.useProgram(shaderProgram);
}

function loadGeometry() {
  // Positions
  positionBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(getVertices()), gl.STATIC_DRAW);
  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
  var positionAttributeLocation = gl.getAttribLocation(shaderProgram, "coord");
  gl.enableVertexAttribArray(positionAttributeLocation);
  gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false,  0,   0);
}

function draw() {  
  gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);  
  gl.clearColor(0.3, 0.3, 0.3, 1.0);
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  gl.enable(gl.DEPTH_TEST);
  gl.disable(gl.CULL_FACE);
  gl.uniform1f(gl.getUniformLocation(shaderProgram, "time"), getTime());  
  gl.drawArrays(gl.TRIANGLES, 0, 2 * 3 * resolution * resolution);  
}

if(hasCodeChanged()) {
  // Initialization
  loadShaders();
  loadGeometry();  
}

draw();

`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	 return UI; 
}//!setup

var gl;
function initGL(canvas) {
	try {
		gl = canvas.getContext("webgl");
		gl.viewportWidth = canvas.width;
		gl.viewportHeight = canvas.height;
	} catch (e) {
	}
	if (!gl) {
		alert("Could not initialise WebGL, sorry :-(");
	}
}

function getShader(gl, id) {
	var shaderScript = document.getElementById(id);	
	if (!shaderScript) {
		return null;
	}

	var str = "";
	var k = shaderScript.firstChild;
	while (k) {
		if (k.nodeType == 3) {
			str += k.textContent;
		}
		k = k.nextSibling;
	}

	var shader;
	if (shaderScript.type == "x-shader/x-fragment") {
		shader = gl.createShader(gl.FRAGMENT_SHADER);
	} else if (shaderScript.type == "x-shader/x-vertex") {
		shader = gl.createShader(gl.VERTEX_SHADER);
	} else {
		return null;
	}

	gl.shaderSource(shader, str);
	gl.compileShader(shader);

	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
		alert(gl.getShaderInfoLog(shader));
		return null;
	}

	return shader;
}


function evalJS(id) {
	
	try {
		eval(document.getElementById(id).innerHTML);
	} catch (e) {
			alert(e.message);
	}	  
}

var count = 0;
function getTime() {  
var d = new Date();
return d.getMinutes() * 60.0 + d.getSeconds() + d.getMilliseconds() / 1000.0;
}

function init() {	
loadShaders();
loadGeometry();
}

function compute(canvas) {
	evalJS("DemoJS");
}
